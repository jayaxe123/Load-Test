name: CI_Adhoc_digitalFirst

# Controls when the workflow will run
on:
  #schedule:
    # Runs "at minute 55 past every hour" (see https://crontab.guru)
    #- cron: '0 10 * * *'
    #- cron: '*/11 * * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Build1_Confirm_Product:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    #runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: PerfAction for JMeter
        #if: github.event.schedule != '*/11 * * * *'
        # You may pin to the exact commit or the version.
        # uses: QAInsights/PerfAction@2c22274f313e13ce9ddaf60c9f337a0e628fcb9d
        uses: QAInsights/PerfAction@2.0
        with:
          # jmeter test plan to execute
          test-plan-path: './name: CI_Adhoc_Confirm_Product

# Controls when the workflow will run
on:
  #schedule:
    # Runs "at minute 55 past every hour" (see https://crontab.guru)
    #- cron: '0 10 * * *'
    #- cron: '*/11 * * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Build1_Confirm_Product:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    #runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: PerfAction for JMeter
        #if: github.event.schedule != '*/11 * * * *'
        # You may pin to the exact commit or the version.
        # uses: QAInsights/PerfAction@2c22274f313e13ce9ddaf60c9f337a0e628fcb9d
        uses: QAInsights/PerfAction@2.0
        with:
          # jmeter test plan to execute
          test-plan-path: './name: CI_Adhoc_Confirm_Product

# Controls when the workflow will run
on:
  #schedule:
    # Runs "at minute 55 past every hour" (see https://crontab.guru)
    #- cron: '0 10 * * *'
    #- cron: '*/11 * * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Build1_Confirm_Product:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    #runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: PerfAction for JMeter
        #if: github.event.schedule != '*/11 * * * *'
        # You may pin to the exact commit or the version.
        # uses: QAInsights/PerfAction@2c22274f313e13ce9ddaf60c9f337a0e628fcb9d
        uses: QAInsights/PerfAction@2.0
        with:
          # jmeter test plan to execute
          test-plan-path: './digitalFirst_v30.jmx'
          
      - name: Get current date
        #if: github.event.schedule != '*/11 * * * *'
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d_T%H-%M-%S')"
      - name: Test with environment variables
        #if: github.event.schedule != '*/11 * * * *'
        run: echo $TAG_NAME - $RELEASE_NAME
        env:
          TAG_NAME: nightly-tag-${{ steps.date.outputs.date }}
          RELEASE_NAME: nightly-release-${{ steps.date.outputs.date }}
          
      - name: Upload Results
        #if: github.event.schedule != '*/11 * * * *'
        uses: actions/upload-artifact@v2
        with:
          name: digitalFirst_v30_results_${{ steps.date.outputs.date }}
          path: result.jtl'
          
      - name: Get current date
        #if: github.event.schedule != '*/11 * * * *'
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d_T%H-%M-%S')"
      - name: Test with environment variables
        #if: github.event.schedule != '*/11 * * * *'
        run: echo $TAG_NAME - $RELEASE_NAME
        env:
          TAG_NAME: nightly-tag-${{ steps.date.outputs.date }}
          RELEASE_NAME: nightly-release-${{ steps.date.outputs.date }}
          
      - name: Upload Results
        #if: github.event.schedule != '*/11 * * * *'
        uses: actions/upload-artifact@v2
        with:
          name: Confirm_Product_API_V1_results_${{ steps.date.outputs.date }}
          path: result.jtl'
          
      - name: Get current date
        #if: github.event.schedule != '*/11 * * * *'
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d_T%H-%M-%S')"
      - name: Test with environment variables
        #if: github.event.schedule != '*/11 * * * *'
        run: echo $TAG_NAME - $RELEASE_NAME
        env:
          TAG_NAME: nightly-tag-${{ steps.date.outputs.date }}
          RELEASE_NAME: nightly-release-${{ steps.date.outputs.date }}
          
      - name: Upload Results
        #if: github.event.schedule != '*/11 * * * *'
        uses: actions/upload-artifact@v2
        with:
          name: Confirm_Product_API_V1_results_${{ steps.date.outputs.date }}
          path: result.jtl
